模板 方法 模式的钩子方法
模板方法模式的钩子方法
1) 在模板方法模式的父类中，我们可以定义一个方法，它默认不做任何事，子类可以
视情况要不要覆盖它，该方法称为“钩子”。
2) 还是用上面做豆浆的例子来讲解，比如，我们还希望制作纯豆浆，不添加任何的配
料，请使用钩子方法对前面的模板方法进行改造


模板方法模 式在Spring 框架应用的源码分析
模板方法模式在Spring框架应用的源码分析
1) Spring IOC容器初始化时运用到的模板方法模式
2) 代码分析+角色分析

1.
public interface
ConfigurableApplicationContext extends
ApplicationContext, Lifecycle, Closeable {
//声明了一个模板方法
void refresh() throws BeansException,
IllegalStateException;
}
2.
public abstract class AbstractApplicationContext extends DefaultResourceLoader
implements ConfigurableApplicationContext, DisposableBean {
// 模板方法 的实 现
public void refresh() throws BeansException, IllegalStateException {
synchronized (this.startupShutdownMonitor) {
// Prepare this context for refreshing.
3.
protected ConfigurableListableBeanFactory obtainFreshBeanFactory() {
refreshBeanFactory();//抽象的
ConfigurableListableBeanFactory beanFactory = getBeanFactory
if (logger.isDebugEnabled()) {
logger.debug("Bean factory for " + getDisplayName() + ": " + beanFactory);
}
4.
public class GenericApplicationContext extends
AbstractApplicationContext implements BeanDefinitionRegistry
protected final void refreshBeanFactory() throws
IllegalStateException {// 子类实现了refreshBeanFactory
// 实现交给子类
}
public final ConfigurableListableBeanFactory getBeanFactory
}
5.
public abstract class
AbstractRefreshableApplicationContext extends
AbstractApplicationContext {
// 也实现了 refreshBeanFactory 和 和 getBeanFactory
// 它的子类，就可以按它的实现方式来getBeanFactory
// 比如 ClassPathXmlApplicationContext
}


模 板方法模式的注意事项和细节
模板方法模式的注意事项和细节
1) 基本思想是： 算法只存在于一个地方，也就是在父类中，容易修改。需要修改算
法时，只要修改父类的模板方法或者已经实现的某些步骤，子类就会继承这些修改
2)  实现了最大化代码复用。父类的模板方法和已实现的某些步骤会被子类继承而直接
使用。
3)  既统一了算法，也提供了很大的灵活性。父类的模板方法确保了算法的结构保持不
变，同时由子类提供部分步骤的实现。
4) 该模式的不足之处：每一个不同的实现都需要一个子类实现，导致类的个数增加，
使得系统更加庞大
5) 一般模板方法都加上final关键字， 防止子类重写模板方法.
6) 模板方法模式使用场景： 当要 完成在 某个 过 程， 该过程要执行一系列步骤 ， 这一
系列的步骤基本相同，但其 个别步骤在实现时 可能不同，通常考虑用模板方法模
式来处理