小型的外包项目，给客户A做一个产品展示网站，客户A的朋友感觉效果不错，也希
望做这样的产品展示网站，但是要求都有些不同：
1) 有客户要求以新闻的形式发布
2) 有客户人要求以博客的形式发布
3) 有客户希望以微信公众号的形式发布


传 统方案解决网站展现项 目
1) 直接复制粘贴一份，然后根据客户不同要求，进行定制修改
2) 给每个网站租用一个空间


传统方案解决网站展现项目-问题分析
1) 需要的网站结构 相似度很高，而且都不是高访问量网站，如果分成多个虚拟空间来
处理，相当于一个相同网站的实例对象很多，造成服务器的资源浪费
2) 解决思路：整合到一个网站中，共享其相关的代码和数据，对于硬盘、内存、CPU、
数据库空间等服务器资源都可以达成共享，减少服务器资源
3) 对于代码来说，由于是一份实例，维护和扩展都更加容易
4) 上面的解决思路就可以使用  享元模式 来解决

享元模式基本介绍
基本介绍
1) 享元模式（Flyweight Pattern） 也叫 蝇量模式: 运
用共享技术有效地支持大量细粒度的对象
2) 常用于系统底层开发，解决系统的性能问题。像
数据库连接池，里面都是创建好的连接对象，在
这些连接对象中有我们需要的则直接拿来用，避
免重新创建，如果没有我们需要的，则创建一个
3) 享元模式能够解决 重复对象的内存浪费的问题，
当系统中有大量相似对象，需要缓冲池时。不需
总是创建新对象，可以从缓冲池里拿。这样可以
降低系统内存，同时提高效率
4) 享元模式 经典的应用场景就是池技术了，String常
量池、数据库连接池、缓冲池等等都是享元模式
的应用，享元模式是池技术的重要实现方式


内 部状态和外部状态
比如围棋、五子棋、跳棋，它们都有大量的棋子对象，围棋和五子棋只有黑白两色，跳棋颜色多一
点，所以棋子颜色就是棋子的内部状态；而各个棋子之间的差别就是位置的不同，当我们落子后，
落子颜色是定的，但位置是变化的，所以棋子坐标就是棋子的外部状态
1) 享元模式提出了两个要求：细粒度和共享对象。这里就涉及到内部状态和外部状态
了，即将对象的信息分为两个部分： 内部状态和 外部状 态
2)  内部状态指对象共享出来的信息，存储在享元对象内部且不会随环境的改变而改变
3)  外部状态指对象得以依赖的一个标记，是随环境改变而改变的、不可共享的状态。
4) 举个例子：围棋理论上有361个空位可以放棋子，每盘棋都有可能有两三百个棋子对
象产生，因为内存空间有限，一台服务器很难支持更多的玩家玩围棋游戏，如果用
享元模式来处理棋子，那么棋子对象就可以减少到只有两个实例，这样就很好的解
决了对象的开销问题



享元模 式在JDK-Interger 的应用源码分析
享元模式在JDK-Interger的应用源码分析
1) Integer中的享元模式
2) 代码分析+Debug源码+说明
public class FlyWeight {
public static void main(String[] args) {
// TODO Auto-generated method stub
Integer x = Integer.valueOf(127);
Integer y = new Integer(127);
Integer z = Integer.valueOf(127);
Integer w = new Integer(127);
System.out.println(x.equals(y)); // ?
System.out.println(x == y ); // ?
System.out.println(x == z ); // ?
System.out.println(w == x ); // ?
System.out.println(w == y ); // ?
}}
public final class Integer extends Number implements Comparable<Integer> {
public static Integer valueOf(int i) {
if (i >= IntegerCache.low && i <= IntegerCache.high)
return IntegerCache.cache[i + (-IntegerCache.low)];
return new Integer(i);
}
public Integer(int value) {
this.value = value;
}
}

享 元模式的注意事项和细 节
享元模式的注意事项和细节
1) 在享元模式这样理解，“享”就表示共享，“元”表示对象
2) 系统中有大量对象，这些对象消耗大量内存，并且对象的状态大部分可以外部化时，
我们就可以考虑选用享元模式
3) 用唯一标识码判断，如果在内存中有，则返回这个唯一标识码所标识的对象，用
HashMap/HashTable存储
4) 享元模式大大减少了对象的创建，降低了程序内存的占用，提高效率
5) 享元模式提高了系统的复杂度。需要分离出内部状态和外部状态，而外部状态具有
固化特性，不应该随着内部状态的改变而改变，这是我们 使用享元模式需要注意的
地方.
6) 使用享元模式时，注意划分内部状态和外部状态，并且需要有一个工厂类加以控制。
7) 享元模式经典的应用场景是需要缓冲池的场景，比如 String常量池、数据库连接池